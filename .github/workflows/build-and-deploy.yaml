name: Docker Build and Deploy

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      publish_docker:
        description: 'Publish Docker image'
        required: false
        default: false
        type: boolean

env:
  DOCKER_IMAGE_NAME: farport/crun-jwt-node-proxy
  NODE_VERSION: '22'
  PUBLISH_DOCKER: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Enable Corepack
      run: corepack enable
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build TypeScript
      run: yarn build:ts

    - name: Keep only prod dependencies
      run: yarn workspaces focus --production

  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build Docker image (test only)
      if: github.event_name != 'release' && github.event.inputs.publish_docker != 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          version=${{ github.ref_name }}
          git_commit=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Login to Docker Hub
      if: github.event_name == 'release' || github.event.inputs.publish_docker == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.FP8_DOCKER_USER }}
        password: ${{ secrets.FP8_DOCKER_PUBLISH }}
    
    - name: Build and push Docker image
      if: github.event_name == 'release' || github.event.inputs.publish_docker == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ env.PUBLISH_DOCKER }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          version=${{ github.ref_name }}
          git_commit=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Image digest
      if: github.event_name == 'release' || github.event.inputs.publish_docker == 'true'
      run: echo "Image pushed with digest ${{ steps.build-push.outputs.digest }}"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'release' || github.event.inputs.publish_docker == 'true'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'